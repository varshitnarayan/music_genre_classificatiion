def euclidean_distance(a, b):
    return np.sqrt(sum((x - y) ** 2 for x, y in zip(a, b)))

def knn_predict(X_train, y_train, x_test, k=3):
    distances = [(euclidean_distance(x_test, x_train), label) for x_train, label in zip(X_train, y_train)]
    distances.sort(key=lambda x: x[0])
    k_nearest = [label for _, label in distances[:k]]
    return max(set(k_nearest), key=k_nearest.count)
def evaluate_knn(X, y, k=3):
    correct = 0
    total = len(X)
    for i in range(total):
        X_train = X[:i] + X[i+1:]
        y_train = y[:i] + y[i+1:]
        y_pred = knn_predict(X_train, y_train, X[i], k)
        if y_pred == y[i]:
            correct += 1
    return correct / total

import random

k_values = list(range(1, 16))  # Create a list from 1 to 15
# test_k_value = random.shuffle(k_values)       # Shuffle the list in-place
k_values = k_values[:15]


best_k = None
best_acc = 0

for k in sorted(k_values):
    accuracy = evaluate_knn(X, y, k)
    print(f"k-NN Accuracy (k={k}): {accuracy * 100:.2f}%")
    if accuracy > best_acc:
        best_acc = accuracy
        best_k = k

print(f"\n Best Accuracy: {best_acc * 100:.2f}% with k = {best_k}")
