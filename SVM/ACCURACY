import numpy as np
from random import shuffle
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

def one_vs_all_labels(y, target_class):
    return np.array([1 if label == target_class else -1 for label in y])

class SimpleLinearSVM:
    def __init__(self, learning_rate=0.001, lambda_param=0.01, n_iters=1000):
        self.lr = learning_rate
        self.lambda_param = lambda_param
        self.n_iters = n_iters
        self.w = None
        self.b = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.w = np.zeros(n_features)
        self.b = 0

        for _ in range(self.n_iters):
            for idx, x_i in enumerate(X):
                condition = y[idx] * (np.dot(x_i, self.w) - self.b) >= 1
                if condition:
                    self.w -= self.lr * (2 * self.lambda_param * self.w)
                else:
                    self.w -= self.lr * (2 * self.lambda_param * self.w - np.dot(x_i, y[idx]))
                    self.b -= self.lr * y[idx]

    def predict(self, X):
        approx = np.dot(X, self.w) - self.b
        return np.sign(approx)

def normalize_features(X):
    X = np.array(X)
    min_vals = X.min(axis=0)
    max_vals = X.max(axis=0)
    return (X - min_vals) / (max_vals - min_vals + 1e-8)

def evaluate_manual_svm(X, y, lam=0.01):
    # Normalize features
    X = normalize_features(X)
    X = np.array(X)
    y = np.array(y)

    # Get unique classes for one-vs-rest
    classes = np.unique(y)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train one-vs-rest classifiers
    classifiers = {}
    for cls in classes:
        binary_y = one_vs_all_labels(y_train, cls)
        svm = SimpleLinearSVM(lambda_param=lam)
        svm.fit(X_train, binary_y)
        classifiers[cls] = svm

    # Predict
    predictions = []
    for x in X_test:
        scores = {cls: np.dot(x, clf.w) - clf.b for cls, clf in classifiers.items()}
        pred = max(scores, key=scores.get)
        predictions.append(pred)

    # Accuracy
    acc = np.mean(np.array(predictions) == y_test)
    print(f"Lambda {lam}: Manual Linear SVM Accuracy = {acc * 100:.2f}%")
    return acc
